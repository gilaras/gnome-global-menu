--- gtk/gtkmenubar.orig	2007-12-27 18:00:02.000000000 -0500
+++ gtk/gtkmenubar.c	2007-12-27 18:05:18.000000000 -0500
@@ -55,6 +55,8 @@
 {
   GtkPackDirection pack_direction;
   GtkPackDirection child_pack_direction;
+  GdkWindow * bin_window;
+  GdkWindow * float_window;
 };
 
 #define GTK_MENU_BAR_GET_PRIVATE(o)  \
@@ -82,6 +84,8 @@
 static gint gtk_menu_bar_get_popup_delay   (GtkMenuShell    *menu_shell);
 static void gtk_menu_bar_move_current      (GtkMenuShell     *menu_shell,
                                             GtkMenuDirectionType direction);
+static void gtk_menu_bar_realize            (GtkWidget         *widget);
+static void gtk_menu_bar_unrealize            (GtkWidget         *widget);
 
 static GtkShadowType get_shadow_type   (GtkMenuBar      *menubar);
 
@@ -107,7 +111,9 @@
   widget_class->size_allocate = gtk_menu_bar_size_allocate;
   widget_class->expose_event = gtk_menu_bar_expose;
   widget_class->hierarchy_changed = gtk_menu_bar_hierarchy_changed;
-  
+  widget_class->realize = gtk_menu_bar_realize;  
+  widget_class->unrealize = gtk_menu_bar_unrealize;  
+
   menu_shell_class->submenu_placement = GTK_TOP_BOTTOM;
   menu_shell_class->get_popup_delay = gtk_menu_bar_get_popup_delay;
   menu_shell_class->move_current = gtk_menu_bar_move_current;
@@ -220,11 +226,13 @@
 static void
 gtk_menu_bar_init (GtkMenuBar *object)
 {
+	g_print("%s\n", __func__);
 }
 
 GtkWidget*
 gtk_menu_bar_new (void)
 {
+	g_print("%s\n", __func__);
   return g_object_new (GTK_TYPE_MENU_BAR, NULL);
 }
 
@@ -532,6 +540,7 @@
 {
   g_return_val_if_fail (GTK_IS_MENU_BAR (widget), FALSE);
   g_return_val_if_fail (event != NULL, FALSE);
+	g_print("%s\n", __func__);
 
   if (GTK_WIDGET_DRAWABLE (widget))
     {
@@ -581,6 +590,7 @@
 set_menu_bars (GtkWindow *window,
 	       GList     *menubars)
 {
+	g_print("%s\n", __func__);
   g_object_set_data (G_OBJECT (window), I_("gtk-menu-bar-list"), menubars);
 }
 
@@ -591,6 +601,7 @@
 {
   gchar *accel = NULL;
   gboolean retval = FALSE;
+	g_print("%s\n", __func__);
   
   g_object_get (gtk_widget_get_settings (widget),
                 "gtk-menu-bar-accel", &accel,
@@ -645,6 +656,7 @@
                GtkMenuBar *menubar)
 {
   GList *menubars = get_menu_bars (window);
+	g_print("%s\n", __func__);
 
   if (!menubars)
     {
@@ -662,6 +674,7 @@
                     GtkMenuBar *menubar)
 {
   GList *menubars = get_menu_bars (window);
+	g_print("%s\n", __func__);
 
   menubars = g_list_remove (menubars, menubar);
 
@@ -681,6 +694,7 @@
 {
   GtkWidget *toplevel;  
   GtkMenuBar *menubar;
+	g_print("%s\n", __func__);
 
   menubar = GTK_MENU_BAR (widget);
 
@@ -693,6 +707,65 @@
     add_to_window (GTK_WINDOW (toplevel), menubar);
 }
 
+static void
+gtk_menu_bar_realize(GtkWidget * widget)
+{
+  GtkMenuBar * menubar = NULL;
+  GtkMenuBarPrivate * priv = NULL;
+  GdkWindowAttr attributes;
+  gint attributes_mask = 0;
+
+  menubar = GTK_MENU_BAR(widget);
+  priv = GTK_MENU_BAR_GET_PRIVATE(menubar);
+	g_print("%s\n", __func__);
+
+  g_return_if_fail (GTK_IS_MENU_SHELL (widget));
+
+  GTK_WIDGET_SET_FLAGS (widget, GTK_REALIZED);
+
+  attributes.x = 0;
+  attributes.y = 0;
+  attributes.width = widget->allocation.width;
+  attributes.height = widget->allocation.height;
+  attributes.window_type = GDK_WINDOW_TOPLEVEL;
+  attributes.wclass = GDK_INPUT_OUTPUT;
+  attributes.visual = gtk_widget_get_visual (widget);
+  attributes.colormap = gtk_widget_get_colormap (widget);
+  attributes.event_mask = gtk_widget_get_events (widget);
+  attributes.event_mask |= (GDK_EXPOSURE_MASK |
+			    GDK_BUTTON_PRESS_MASK |
+			    GDK_BUTTON_RELEASE_MASK |
+			    GDK_KEY_PRESS_MASK |
+			    GDK_ENTER_NOTIFY_MASK |
+			    GDK_LEAVE_NOTIFY_MASK);
+
+  attributes.type_hint = GDK_WINDOW_TYPE_HINT_TOOLBAR;
+
+  attributes_mask = GDK_WA_X | GDK_WA_Y | GDK_WA_VISUAL | GDK_WA_COLORMAP | GDK_WA_TYPE_HINT;
+  widget->window = gdk_window_new (gtk_widget_get_root_window (widget), &attributes, attributes_mask);
+  gdk_window_set_user_data (widget->window, widget);
+  gdk_window_set_title (widget->window, "GTK MENUBAR");
+  gdk_window_set_transient_for (widget->window, 
+		gtk_widget_get_toplevel(gtk_widget_get_parent(widget))->window);
+  gdk_window_stick(widget->window);
+
+  widget->style = gtk_style_attach (widget->style, widget->window);
+  gtk_style_set_background (widget->style, widget->window, GTK_STATE_NORMAL);
+
+}
+static void
+gtk_menu_bar_unrealize(GtkWidget * widget)
+{
+  GtkMenuBar * menubar = NULL;
+  GtkMenuBarPrivate * priv = NULL;
+  menubar = GTK_MENU_BAR(widget);
+  priv = GTK_MENU_BAR_GET_PRIVATE(menubar);
+	g_print("%s\n", __func__);
+
+  menubar = GTK_MENU_BAR (widget);
+  GTK_WIDGET_CLASS(gtk_menu_bar_parent_class)->unrealize(widget); 
+
+}
 /**
  * _gtk_menu_bar_cycle_focus:
  * @menubar: a #GtkMenuBar
@@ -706,6 +779,7 @@
 {
   GtkWidget *toplevel = gtk_widget_get_toplevel (GTK_WIDGET (menubar));
   GtkMenuItem *to_activate = NULL;
+	g_print("%s\n", __func__);
 
   if (GTK_WIDGET_TOPLEVEL (toplevel))
     {
@@ -742,6 +816,7 @@
 get_shadow_type (GtkMenuBar *menubar)
 {
   GtkShadowType shadow_type = GTK_SHADOW_OUT;
+	g_print("%s\n", __func__);
   
   gtk_widget_style_get (GTK_WIDGET (menubar),
 			"shadow-type", &shadow_type,
@@ -769,6 +844,7 @@
   GtkMenuBar *menubar = GTK_MENU_BAR (menu_shell);
   GtkTextDirection text_dir;
   GtkPackDirection pack_dir;
+	g_print("%s\n", __func__);
 
   text_dir = gtk_widget_get_direction (GTK_WIDGET (menubar));
   pack_dir = gtk_menu_bar_get_pack_direction (menubar);
