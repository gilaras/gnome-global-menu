--- gtk/gtkmenubar.orig	2007-12-25 07:59:33.000000000 -0500
+++ gtk/gtkmenubar.c	2007-12-25 07:59:55.000000000 -0500
@@ -38,7 +38,20 @@
 #include "gtkwindow.h"
 #include "gtkprivate.h"
 #include "gtkalias.h"
-
+// For global menubar
+#ifdef GDK_WINDOWING_X11
+#include "gdk/x11/gdkx.h"
+#include "gdk/x11/gdkwindow-x11.h"
+#include "gtkbox.h"
+#include "gtkdrawingarea.h"
+#include "gtkhbox.h"
+#include "gtklabel.h"
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <X11/Xatom.h>
+#include <X11/Xlib.h>
+#endif
 
 #define BORDER_SPACING  0
 #define DEFAULT_IPADDING 1
@@ -55,6 +68,10 @@
 {
   GtkPackDirection pack_direction;
   GtkPackDirection child_pack_direction;
+#ifdef GDK_WINDOWING_X11
+		GtkWindow*       orig_toplevel_win;    // original window, obtained in map()
+		GtkWindow*       mbar_toplevel_win;    // could be NULL, if disabled
+#endif
 };
 
 #define GTK_MENU_BAR_GET_PRIVATE(o)  \
@@ -87,6 +104,170 @@
 
 G_DEFINE_TYPE (GtkMenuBar, gtk_menu_bar, GTK_TYPE_MENU_SHELL)
 
+
+		/*
+		 * Global Menubar options
+		 */
+
+#ifdef GDK_WINDOWING_X11
+static gboolean option_no_global()
+{
+		static gboolean no_global_set = FALSE;
+		static gboolean no_global = FALSE;
+		char* env = NULL;
+		if (no_global_set) return no_global;
+		env = getenv("GTK_MENUBAR_NO_GLOBAL");
+		if (env == NULL)
+				env = "acroread gnome-globalmenu-applet gnome-panel xfce4-globalmenu-plugin xfce4-panel";
+		if (strcmp(env, "1") == 0)
+				no_global = TRUE;
+		else
+		{
+				// check for GTK_MENUBAR_NO_GLOBAL
+				gchar** no_global_prgs = g_strsplit(env, " ", 0);
+				gchar** p = no_global_prgs;
+				gchar* prg = g_get_prgname();
+				while (*p != NULL)
+				{
+						if (strcmp(*p, prg) == 0)
+						{
+								no_global = TRUE;
+								break;
+						}
+						p ++;
+				}
+				g_strfreev(no_global_prgs);
+		}
+		if (! no_global)
+		{
+				// check for mozplugger
+				char scmd[255];
+				char buffer[1024];
+				sprintf(scmd, "ps -o comm= -p `ps -o ppid= -p %d`", getpid());
+				FILE* f = popen(scmd, "r");
+				int len = fread(buffer, 1, 1023, f);
+				if (len > 0)
+				{
+						char* p;
+						buffer[len] = 0;
+						if ((p = index(buffer, '\n')) != NULL)
+								*p = 0;
+						if (strcmp(buffer, "mozplugger-help") == 0)
+								no_global = TRUE;
+				}
+				else
+				{
+						fprintf(stderr, "failed to check for mozplugger by \"%s\"\n", scmd);
+				}
+				pclose(f);
+		}
+		no_global_set = TRUE;
+		return no_global;
+}
+
+/*
+ * Global Menubar event handlers/callbacks
+ */
+
+static gboolean orig_toplevel_on_destroy (GtkWidget *widget, gpointer my_data)
+{
+		GtkMenuBar* menubar = (GtkMenuBar*) my_data;
+		GtkMenuBarPrivate* priv = GTK_MENU_BAR_GET_PRIVATE (menubar);
+		if (priv->mbar_toplevel_win)
+		{
+				gtk_widget_destroy (GTK_WIDGET (priv->mbar_toplevel_win));
+				priv->mbar_toplevel_win = NULL;
+				priv->orig_toplevel_win = NULL;
+		}
+		return FALSE;
+}
+
+void menuitem_foreach_cb(GtkWidget * widget, GtkLabel ** label){
+	if(GTK_IS_LABEL(widget)){
+		 *label = widget;
+		g_print("menubar: label discovered\n");
+		g_print("keyval: %d\twidget: %p\n", 
+			gtk_label_get_mnemonic_keyval(*label),
+			gtk_label_get_mnemonic_widget(*label));
+	}
+}
+
+static void orig_toplevel_on_event_after (GtkWidget*  widget,
+				GdkEvent*   event,
+				gpointer    my_data)
+{
+		GtkMenuBar* menubar = (GtkMenuBar*) my_data;
+		GtkMenuBarPrivate* priv = GTK_MENU_BAR_GET_PRIVATE (menubar);
+		if (! priv->mbar_toplevel_win) return;
+		if (event->type == GDK_FOCUS_CHANGE && event->focus_change.in)
+				gtk_widget_show (GTK_WIDGET (priv->mbar_toplevel_win));
+}
+
+static gboolean
+window_key_press_handler (GtkWidget   *widget,
+                          GdkEventKey *event,
+                          GtkWidget   *mbar_win);
+static void gtk_menu_bar_map (GtkWidget *widget)
+{
+		GtkMenuBar* menubar = GTK_MENU_BAR (widget);
+		GtkMenuBarPrivate* priv = GTK_MENU_BAR_GET_PRIVATE (menubar);
+
+		if (!priv->mbar_toplevel_win && !option_no_global())
+		{
+				Atom typehints[2];
+				GdkGeometry geometry;
+				GtkRcStyle *mbarstyle;
+				// Setup menubar's original top-level window
+				priv->orig_toplevel_win
+						= GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (menubar)));
+				g_signal_connect (GTK_WIDGET (priv->orig_toplevel_win), "destroy",
+								G_CALLBACK (orig_toplevel_on_destroy), menubar);
+				g_signal_connect (GTK_WIDGET (priv->orig_toplevel_win), "event-after",
+								G_CALLBACK (orig_toplevel_on_event_after), menubar);
+				// Create new top-level window for menubar
+				priv->mbar_toplevel_win
+						= GTK_WINDOW (gtk_window_new (GTK_WINDOW_TOPLEVEL));
+				gtk_window_set_transient_for (priv->mbar_toplevel_win, priv->orig_toplevel_win);
+				gtk_window_set_title (priv->mbar_toplevel_win, "GTK MENUBAR");
+				gtk_window_set_resizable (priv->mbar_toplevel_win, FALSE);
+				gtk_window_set_decorated (priv->mbar_toplevel_win, FALSE);
+				gtk_window_set_type_hint (priv->mbar_toplevel_win,
+								GDK_WINDOW_TYPE_HINT_DOCK);
+				// Set geometry hints
+				geometry.max_width = geometry.min_width = -1;
+				geometry.max_height = geometry.min_height = -1;
+				gtk_window_set_geometry_hints (priv->mbar_toplevel_win,
+								GTK_WIDGET (priv->mbar_toplevel_win),
+								&geometry,
+								GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE);
+				gtk_window_stick (priv->mbar_toplevel_win);
+				g_signal_connect (GTK_WIDGET (priv->mbar_toplevel_win), "delete-event",
+								G_CALLBACK (gtk_widget_hide_on_delete), menubar);
+				// Menubar
+				gtk_widget_reparent (GTK_WIDGET (menubar),
+								GTK_WIDGET (priv->mbar_toplevel_win));
+
+			    g_signal_connect (G_OBJECT(priv->orig_toplevel_win),
+						"key_press_event",
+						G_CALLBACK (window_key_press_handler),
+						priv->mbar_toplevel_win);
+				
+				// Show everything!
+				gtk_widget_show_all (GTK_WIDGET (priv->mbar_toplevel_win));
+				typehints[0] = XInternAtom (gdk_display, "_KDE_NET_WM_WINDOW_TYPE_TOPMENU", FALSE);
+				typehints[1] = XInternAtom (gdk_display, "_NET_WM_WINDOW_TYPE_DOCK", FALSE);
+				XChangeProperty (gdk_display,
+								GDK_WINDOW_XID(GTK_WIDGET (priv->mbar_toplevel_win)->window),
+								XInternAtom (gdk_display, "_NET_WM_WINDOW_TYPE", FALSE),
+								XA_ATOM, 32, PropModeReplace,
+								(const guchar *) typehints, 2);
+				gtk_window_move (priv->mbar_toplevel_win, 0, 0);
+		}
+
+		(* GTK_WIDGET_CLASS (gtk_menu_bar_parent_class)->map) (GTK_WIDGET (menubar));
+}
+#endif
+
 static void
 gtk_menu_bar_class_init (GtkMenuBarClass *class)
 {
@@ -108,6 +289,9 @@
   widget_class->expose_event = gtk_menu_bar_expose;
   widget_class->hierarchy_changed = gtk_menu_bar_hierarchy_changed;
   
+		#ifdef GDK_WINDOWING_X11
+				  widget_class->map = gtk_menu_bar_map;
+		#endif
   menu_shell_class->submenu_placement = GTK_TOP_BOTTOM;
   menu_shell_class->get_popup_delay = gtk_menu_bar_get_popup_delay;
   menu_shell_class->move_current = gtk_menu_bar_move_current;
@@ -220,6 +404,11 @@
 static void
 gtk_menu_bar_init (GtkMenuBar *object)
 {
+#ifdef GDK_WINDOWING_X11
+		GtkMenuBarPrivate* priv = GTK_MENU_BAR_GET_PRIVATE (object);
+		priv->mbar_toplevel_win = 0;
+		priv->orig_toplevel_win = 0;
+#endif
 }
 
 GtkWidget*
@@ -584,18 +773,40 @@
   g_object_set_data (G_OBJECT (window), I_("gtk-menu-bar-list"), menubars);
 }
 
+#ifdef GDK_WINDOWING_X11
+static gboolean
+window_key_press_handler (GtkWidget   *orig_win,
+                          GdkEventKey *event,
+                          GtkWidget   *mbar_win)
+#else
 static gboolean
 window_key_press_handler (GtkWidget   *widget,
                           GdkEventKey *event,
-                          gpointer     data)
+                          gpointer unused)
+#endif
 {
   gchar *accel = NULL;
   gboolean retval = FALSE;
   
+#ifdef GDK_WINDOWING_X11
+  GtkWidget * widget;
+  if(mbar_win)
+		widget = mbar_win;
+  else
+		widget = orig_win;
+#endif
+  g_print("menubar: key pressed %s, state %d\n", 
+		gdk_keyval_name(event->keyval), event->state);
+#ifdef GDK_WINDOWING_X11
+  if(mbar_win && event->state == gtk_window_get_mnemonic_modifier(orig_win)){
+		g_print("mnemonic modifier, transmit to mbar_win\n");
+		gtk_window_activate_key(mbar_win, event);
+	}
+#endif
   g_object_get (gtk_widget_get_settings (widget),
                 "gtk-menu-bar-accel", &accel,
                 NULL);
-
+  
   if (accel && *accel)
     {
       guint keyval = 0;
@@ -605,6 +816,7 @@
 
       if (keyval == 0)
         g_warning ("Failed to parse menu bar accelerator '%s'\n", accel);
+	  g_print("menubar: keyval resolved, %s\n", gdk_keyval_name(keyval));
 
       /* FIXME this is wrong, needs to be in the global accel resolution
        * thing, to properly consider i18n etc., but that probably requires
@@ -681,7 +893,9 @@
 {
   GtkWidget *toplevel;  
   GtkMenuBar *menubar;
-
+#ifdef GDK_WINDOWING_X11
+  GtkMenuBarPrivate* priv = GTK_MENU_BAR_GET_PRIVATE (menubar);
+#endif
   menubar = GTK_MENU_BAR (widget);
 
   toplevel = gtk_widget_get_toplevel (widget);
