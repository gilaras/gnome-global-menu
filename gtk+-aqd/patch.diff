Index: gtk+-aqd/gtk/libgnomenu.c
===================================================================
--- gtk+-aqd/gtk/libgnomenu.c	(revision 0)
+++ gtk+-aqd/gtk/libgnomenu.c	(revision 0)
@@ -0,0 +1,66 @@
+#include <config.h>
+#include "gtkmain.h"
+#include "gtkprivate.h"
+#include "libgnomenu.h"
+#include "gtkwidget.h"
+
+
+static GModule * module = NULL;
+static gulong * version = NULL;
+
+gboolean (*_gnomenu_init_)();
+
+#define P(...) (__VA_ARGS__)
+#define DEF_FUNC(type, NAME, ...) \
+	static type ( * _ ## NAME ##_ ) (__VA_ARGS__); \
+	type NAME (__VA_ARGS__) {\
+	return (*_ ## NAME ## _)(__VA_ARGS__); \
+	}
+
+DEF_FUNC(GQuark, gnomenu_wrap_widget, widget)
+DEF_FUNC(void, gnomenu_unwrap_widget, widget)
+DEF_FUNC(void, gnomenu_bind_menu, window, menu)
+DEF_FUNC(void, gnomenu_unbind_menu, window, menu)
+DEF_FUNC(GtkWidget *, gnomenu_find_widget, object)
+
+static gboolean libgnomenu_load(){
+	module = g_module_open("libgnomenu", 0);
+	if(!module) {
+		g_warning("Global Menu Library not found; \n"
+				"This is no fatal; you only lose global menu.");
+		module = NULL;
+	}
+	g_module_symbol(module, "gnomenu_version", &version);
+	if((*version) >> 16 != 5) {
+		g_warning("Global Menu Version mismatch.\n");
+		module = NULL;
+	}
+#define GET_SYMBOL(x) \
+	if(!g_module_symbol(module, #x, & _ ## x ## _)){ \
+		module = NULL; \
+		g_warning("symbol %s not found", #x); \
+	}
+	GET_SYMBOL(gnomenu_init);
+	GET_SYMBOL(gnomenu_wrap_widget);
+	GET_SYMBOL(gnomenu_unwrap_widget);
+	GET_SYMBOL(gnomenu_bind_menu);
+	GET_SYMBOL(gnomenu_unbind_menu);
+	GET_SYMBOL(gnomenu_find_widget);
+
+	if(module == NULL) {
+		return FALSE;
+	}
+	return TRUE;
+}
+static gboolean g_gnomenu_initialized = FALSE;
+gboolean gnomenu_init() {
+	if(!g_gnomenu_initialized){
+		g_gnomenu_initialized = libgnomenu_load();
+	}
+	if(g_gnomenu_initialized)
+		g_gnomenu_initialized  = _gnomenu_init_();
+	return g_gnomenu_initialized;
+}
+gboolean gnomenu_initialized(){
+	return g_gnomenu_initialized;
+}
Index: gtk+-aqd/gtk/libgnomenu.h
===================================================================
--- gtk+-aqd/gtk/libgnomenu.h	(revision 0)
+++ gtk+-aqd/gtk/libgnomenu.h	(revision 0)
@@ -0,0 +1 @@
+gboolean gnomenu_initialized();
Index: gtk+-aqd/gtk/gtkmenubar.c
===================================================================
--- gtk+-aqd/gtk/gtkmenubar.c	(revision 20909)
+++ gtk+-aqd/gtk/gtkmenubar.c	(working copy)
@@ -39,7 +39,9 @@
 #include "gtkprivate.h"
 #include "gtkalias.h"
 
+#include "libgnomenu.h" /* libgnomenu */
 
+
 #define BORDER_SPACING  0
 #define DEFAULT_IPADDING 1
 
@@ -83,6 +85,8 @@
 static void gtk_menu_bar_move_current      (GtkMenuShell     *menu_shell,
                                             GtkMenuDirectionType direction);
 
+static void gtk_menu_bar_map		(GtkWidget * widget);
+
 static GtkShadowType get_shadow_type   (GtkMenuBar      *menubar);
 
 G_DEFINE_TYPE (GtkMenuBar, gtk_menu_bar, GTK_TYPE_MENU_SHELL)
@@ -107,7 +111,8 @@
   widget_class->size_allocate = gtk_menu_bar_size_allocate;
   widget_class->expose_event = gtk_menu_bar_expose;
   widget_class->hierarchy_changed = gtk_menu_bar_hierarchy_changed;
-  
+  widget_class->map = gtk_menu_bar_map;
+
   menu_shell_class->submenu_placement = GTK_TOP_BOTTOM;
   menu_shell_class->get_popup_delay = gtk_menu_bar_get_popup_delay;
   menu_shell_class->move_current = gtk_menu_bar_move_current;
@@ -215,6 +220,7 @@
 						   GTK_PARAM_READWRITE));
 
   g_type_class_add_private (gobject_class, sizeof (GtkMenuBarPrivate));  
+
 }
 
 static void
@@ -290,7 +296,11 @@
 
   requisition->width = 0;
   requisition->height = 0;
-  
+
+  if(gnomenu_initialized()){
+ 	return ; 
+  }
+
   if (GTK_WIDGET_VISIBLE (widget))
     {
       menu_bar = GTK_MENU_BAR (widget);
@@ -639,7 +649,18 @@
 
   return retval;
 }
-
+static void toplevel_realized(GtkWidget * toplevel, gpointer data){
+  GtkMenuBar * menubar = data;
+  if(gnomenu_initialized()){
+	  gnomenu_bind_menu(toplevel->window, menubar);
+  }
+}
+static void toplevel_unrealized(GtkWidget * toplevel, gpointer data){
+  GtkMenuBar * menubar = data;
+  if(gnomenu_initialized()){
+    gnomenu_unbind_menu(toplevel->window, menubar);
+  }
+}
 static void
 add_to_window (GtkWindow  *window,
                GtkMenuBar *menubar)
@@ -655,6 +676,14 @@
     }
 
   set_menu_bars (window, g_list_prepend (menubars, menubar));
+
+	g_signal_connect(window, "realize", toplevel_realized, menubar);
+	g_signal_connect(window, "unrealize", toplevel_unrealized, menubar);
+	  if(GTK_WIDGET_REALIZED(window)){
+		  toplevel_realized(window, menubar);
+	  }
+
+
 }
 
 static void
@@ -673,6 +702,11 @@
     }
 
   set_menu_bars (window, menubars);
+	g_signal_handlers_disconnect_by_func(window, toplevel_realized, menubar);
+	g_signal_handlers_disconnect_by_func(window, toplevel_unrealized, menubar);
+	  if(GTK_WIDGET_REALIZED(window)){
+		  toplevel_unrealized(window, menubar);
+	  }
 }
 
 static void
@@ -692,6 +726,14 @@
   if (GTK_WIDGET_TOPLEVEL (toplevel))
     add_to_window (GTK_WINDOW (toplevel), menubar);
 }
+static void
+gtk_menu_bar_map(GtkWidget * widget) {
+  if(gnomenu_initialized()){
+	  return;
+  } else {
+	GTK_WIDGET_CLASS(gtk_menu_bar_parent_class)->map(widget);
+  }
+}
 
 /**
  * _gtk_menu_bar_cycle_focus:
Index: gtk+-aqd/gtk/gtkmain.c
===================================================================
--- gtk+-aqd/gtk/gtkmain.c	(revision 20909)
+++ gtk+-aqd/gtk/gtkmain.c	(working copy)
@@ -383,6 +383,7 @@
 
 static GString *gtk_modules_string = NULL;
 static gboolean g_fatal_warnings = FALSE;
+G_MODULE_EXPORT gboolean gtk_no_global_menu = FALSE ;
 
 #ifdef G_ENABLE_DEBUG
 static gboolean
@@ -423,6 +424,8 @@
 }
 
 static const GOptionEntry gtk_args[] = {
+  { "gtk-no-global-menu", 0, 0, G_OPTION_ARG_NONE, &gtk_no_global_menu,
+	  N_("Disable Global Menu") },
   { "gtk-module",       0, 0, G_OPTION_ARG_CALLBACK, gtk_arg_module_cb,   
     /* Description of --gtk-module=MODULES in --help output */ N_("Load additional GTK+ modules"), 
     /* Placeholder in --gtk-module=MODULES in --help output */ N_("MODULES") },
@@ -733,6 +736,12 @@
 	  
 	  return FALSE;
 	}
+
+  if(!gtk_no_global_menu){
+	  gnomenu_init();
+	  if(!gnomenu_initialized())
+		g_warning("Gnomenu failed to start.");
+  }
     }
 
   return TRUE;
@@ -912,7 +921,16 @@
   if (!gtk_parse_args (argc, argv))
     return FALSE;
 
-  return gdk_display_open_default_libgtk_only () != NULL;
+  if(gdk_display_open_default_libgtk_only () != NULL)
+  {
+	  if(!gtk_no_global_menu){
+		  gnomenu_init();
+		  if(!gnomenu_initialized())
+			g_warning("Gnomenu failed to start.");
+	  }
+	  return TRUE;
+  }
+  return FALSE;
 }
 
 #ifdef G_PLATFORM_WIN32
Index: gtk+-aqd/gtk/libgnomenu/menu.h
===================================================================
--- gtk+-aqd/gtk/libgnomenu/menu.h	(revision 0)
+++ gtk+-aqd/gtk/libgnomenu/menu.h	(revision 0)
@@ -0,0 +1,9 @@
+#ifndef _MENU_H_
+#define _MENU_H_
+gboolean gnomenu_init();
+GQuark gnomenu_wrap_object(GtkWidget * widget);
+void gnomenu_bind_menu(GdkWindow * window, GQuark object);
+void gnomenu_unbind_menu(GdkWindow * window, GQuark object);
+void gnomenu_unwrap_object(GQuark object);
+GtkWidget * gnomenu_find_widget(GQuark object);
+#endif
Index: gtk+-aqd/gtk/Makefile.am
===================================================================
--- gtk+-aqd/gtk/Makefile.am	(revision 20909)
+++ gtk+-aqd/gtk/Makefile.am	(working copy)
@@ -345,6 +345,7 @@
 
 # GTK+ header files that don't get installed
 gtk_private_h_sources =		\
+	libgnomenu.h	\
 	gtkquery.h		\
 	gtksearchengine.h	\
 	gtksearchenginesimple.h	\
@@ -390,6 +391,7 @@
 
 # GTK+ C sources to build the library from
 gtk_base_c_sources =            \
+	libgnomenu.c \
 	gtkquery.c		\
 	gtksearchengine.c	\
 	gtksearchenginesimple.c	\
Index: gtk+-aqd/gtk/gtkmenuitem.c
===================================================================
--- gtk+-aqd/gtk/gtkmenuitem.c	(revision 20909)
+++ gtk+-aqd/gtk/gtkmenuitem.c	(working copy)
@@ -40,6 +40,8 @@
 #include "gtkintl.h"
 #include "gtkalias.h"
 
+#include "libgnomenu.h"
+
 #define MENU_ITEM_CLASS(w)  GTK_MENU_ITEM_CLASS (GTK_OBJECT (w)->klass)
 
 enum {
@@ -260,6 +262,11 @@
   menu_item->right_justify = FALSE;
 
   menu_item->timer = 0;
+
+  if(gnomenu_initialized()){
+  	gnomenu_wrap_widget(menu_item);
+  }
+  
 }
 
 GtkWidget*
@@ -359,6 +366,11 @@
 {
   GtkMenuItem *menu_item = GTK_MENU_ITEM (object);
 
+  if(gnomenu_initialized()){
+  	gnomenu_unwrap_widget(menu_item);
+  }
+  
+
   g_free (menu_item->accel_path);
 
   G_OBJECT_CLASS (gtk_menu_item_parent_class)->finalize (object);
@@ -785,6 +797,7 @@
   gdk_window_set_user_data (menu_item->event_window, widget);
 
   widget->style = gtk_style_attach (widget->style, widget->window);
+
 }
 
 static void
Index: gtk+-aqd/gtk/gtkmenu.c
===================================================================
--- gtk+-aqd/gtk/gtkmenu.c	(revision 20909)
+++ gtk+-aqd/gtk/gtkmenu.c	(working copy)
@@ -897,6 +897,7 @@
   priv->lower_arrow_state = GTK_STATE_NORMAL;
 
   priv->have_layout = FALSE;
+
 }
 
 static void
Index: gtk+-aqd/gtk/gtkmenushell.c
===================================================================
--- gtk+-aqd/gtk/gtkmenushell.c	(revision 20909)
+++ gtk+-aqd/gtk/gtkmenushell.c	(working copy)
@@ -43,6 +43,8 @@
 #include "gtkintl.h"
 #include "gtkalias.h"
 
+#include "libgnomenu.h"
+
 #define MENU_SHELL_TIMEOUT   500
 
 #define PACK_DIRECTION(m)                                 \
@@ -397,6 +399,11 @@
   priv->key_hash = NULL;
   priv->take_focus = TRUE;
   priv->activated_submenu = FALSE;
+
+  if(gnomenu_initialized()){
+  	gnomenu_wrap_widget(menu_shell);
+  }
+
 }
 
 static void
@@ -443,6 +450,11 @@
   GtkMenuShell *menu_shell = GTK_MENU_SHELL (object);
   GtkMenuShellPrivate *priv = GTK_MENU_SHELL_GET_PRIVATE (menu_shell);
 
+  if(gnomenu_initialized()){
+  	gnomenu_unwrap_widget(menu_shell);
+  }
+
+
   if (priv->mnemonic_hash)
     _gtk_mnemonic_hash_free (priv->mnemonic_hash);
   if (priv->key_hash)
@@ -532,6 +544,7 @@
 
   widget->style = gtk_style_attach (widget->style, widget->window);
   gtk_style_set_background (widget->style, widget->window, GTK_STATE_NORMAL);
+
 }
 
 void
